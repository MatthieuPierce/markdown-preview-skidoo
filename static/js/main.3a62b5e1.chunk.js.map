{"version":3,"sources":["logo.svg","redux/constants.js","components/Editor.js","redux/actions/changeInput.js","components/Preview.js","App.js","reportWebVitals.js","redux/reducers/rootReducer.js","markdownQuickReference.js","redux/store.js","index.js"],"names":["CHANGETEXT","Editor","props","handleChange","event","changeInput","target","value","bind","className","id","type","onChange","this","editorText","React","Component","connect","state","valueFromEvent","newEditorText","Preview","produceMarkup","content","__html","DOMPurify","sanitize","marked","breaks","dangerouslySetInnerHTML","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","startingState","rootReducer","action","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAAe,I,+CCAFA,EAAa,aCKpBC,G,wDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,aAAe,SAACC,GACd,EAAKF,MAAMG,YAAYD,EAAME,OAAOC,QAJpC,EAAKJ,aAAe,EAAKA,aAAaK,KAAlB,gBAFH,E,qDASX,IAAD,OAEP,OACE,sBAAKC,UAAU,iBAAf,UACE,iCAAQ,mDACR,qBAAKA,UAAU,qBAAf,SACE,0BAAUC,GAAG,SAASD,UAAU,cAAcE,KAAK,OAAOC,SAAU,SAACR,GAAD,OAAW,EAAKD,aAAaC,IAAQG,MAAOM,KAAKX,MAAMY,sB,GAhB9GC,IAAMC,YAkCZC,eAPS,SAACC,GACvB,MAAO,CACLJ,WAAYI,EAAMJ,cAKkB,CAAET,YCrCf,SAACc,GAC1B,MAAO,CACLR,KAAMX,EACNoB,cAAeD,KDkCJF,CAA0ChB,G,kCEjCnDoB,G,wDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAIRoB,cAAgB,SAACC,GAIf,MAAO,CACLC,OAAQC,IAAUC,SAASC,IAAOJ,EAJhB,CAClBK,QAAQ,OALV,EAAKN,cAAgB,EAAKA,cAAcd,KAAnB,gBAFJ,E,qDAejB,OACE,sBAAKC,UAAU,kBAAf,UACE,wBAAQA,UAAU,iBAAlB,SACE,yDAEF,qBAAKC,GAAG,UAAUmB,wBAAyBhB,KAAKS,cAAcT,KAAKX,MAAMY,qB,GArB3DC,IAAMC,YAwCbC,eAPS,SAACC,GACvB,MAAO,CACLJ,WAAYI,EAAMJ,cAKPG,CAAyBI,GC7BzBS,MAVf,WACE,OACE,sBAAKrB,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCCSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCJRQ,EAAgB,CACpB1B,WCJ0B,4tCDmBb2B,EAZK,WAAyC,IAAhCvB,EAA+B,uDAAvBsB,EAAeE,EAAQ,uCAC1D,OAAQA,EAAO/B,MACZ,KAAKX,EACJ,MAAO,CACLc,WAAY4B,EAAOtB,eAEtB,QACE,OAAOF,IEXDyB,EAAQC,YAAYH,GCQjCI,IAASC,OAEP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJK,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.3a62b5e1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const CHANGETEXT = 'CHANGETEXT';","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeInput } from '../redux/actions/changeInput.js'\nimport './Editor.css'\n\nclass Editor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange = (event) => {\n    this.props.changeInput(event.target.value);\n  }\n\nrender() {\n\n  return (\n    <div className=\"editor-wrapper\">\n      <header><h2>Markdown Editor</h2></header>\n      <div className=\"textarea-container\">\n        <textarea id=\"editor\" className=\"editorInput\" type=\"text\" onChange={(event) => this.handleChange(event)} value={this.props.editorText}></textarea>\n      </div>\n    </div>\n  );\n\n}\n\n}\n\n//Redux\n\nconst mapStateToProps = (state) => {\n  return {\n    editorText: state.editorText\n  }\n}\n\n\nexport default connect(mapStateToProps, { changeInput })(Editor);","import { CHANGETEXT } from '../constants.js'\n\nexport const changeInput = (valueFromEvent) => {\n  return {\n    type: CHANGETEXT,\n    newEditorText: valueFromEvent\n  }\n\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport marked from 'marked';\nimport DOMPurify from 'dompurify';\nimport './Preview.css'\n\nclass Preview extends React.Component {\n  constructor(props) {\n    super(props);\n    this.produceMarkup = this.produceMarkup.bind(this);\n  }\n\n  produceMarkup = (content) => {\n    let markedOptions = {\n      breaks: true\n    }\n    return {\n      __html: DOMPurify.sanitize(marked(content, markedOptions))\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"preview-wrapper\">\n        <header className=\"preview-header\">\n          <h2>Markdown HTML Preview</h2>\n        </header> \n        <div id=\"preview\" dangerouslySetInnerHTML={this.produceMarkup(this.props.editorText)}></div>\n        {/* <div><h2>raw editorText</h2>\n         <code>{this.props.editorText}</code>\n        </div> */}\n      </div>\n      \n    )\n  }\n}\n\n//Redux\n\nconst mapStateToProps = (state) => {\n  return {\n    editorText: state.editorText\n  }\n}\n\n\nexport default connect(mapStateToProps)(Preview);","import logo from './logo.svg';\nimport './App.css';\nimport Editor from './components/Editor'\nimport Preview from './components/Preview'\n// import ReactFCCtest from 'react-fcctest';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Editor />\n      <Preview />\n      {/* <ReactFCCtest /> */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGETEXT } from '../constants.js';\nimport markdownQuickReference from '../../markdownQuickReference';\n\nconst startingState = {\n  editorText: markdownQuickReference\n}\n\nconst rootReducer = function(state = startingState, action) {\n  switch (action.type) {\n     case CHANGETEXT:\n      return { \n        editorText: action.newEditorText\n      }\n     default:\n       return state;\n    }\n  \n}\n\nexport default rootReducer;","const markdownQuickReference = \n`*stars* or _underscores_ for italics.\n **Double stars** or __double underscores__ for bold.\n***Three together*** for ___both___.\n\n# This is H1\n## This is H2\n### This is H3 with some extra pounds ###\n#### You get the idea ####\n##### I don't need extra pounds at the end\n###### H6 is the max\n\nParagraphs: place a blank line between chunks of text.\n\nThis is a URL:  <https://www.github.com>.\nThis is an inline link to [Google](https://www.google.com). \nImages work exactly like links, but they have exclamation points in front.\n![Google Logo](https://www.google.com/images/errors/logo_sm.gif)\n\n* This is a bulleted list\n* Great for shopping lists\n- You can also use hyphens\n+ Or plus symbols\n\nBlockquotes\n> This chunk of text is in a block quote. Its multiple lines will all be\n> indented a bit from the rest of the text.\n> > Multiple levels of block quotes also work.\n>     You can also use preformatted text with your blockquotes\n>     as long as you add at least five spaces.\n\nCode: If you want to include code and have new lines preserved, indent the line with a tab or at least four spaces:\n\n    The text will stay as text, \n    so any *markdown* or <u>HTML</u>\n    \nThis is inline code: \\`inline code\\`\n`;\n\nexport default markdownQuickReference;","import { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer'\n\nexport const store = createStore(rootReducer);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//Redux\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store.js';\n\n\nReactDOM.render(\n\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}